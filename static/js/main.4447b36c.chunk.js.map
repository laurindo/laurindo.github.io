{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["names","images","App","className","map","image","i","Math","floor","random","length","key","id","src","onClick","name","node","document","getElementById","domtoimage","toPng","then","dataUrl","link","createElement","download","href","click","catch","error","console","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mPAIMA,G,MAAQ,CACZ,UACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,UACA,YACA,QACA,OACA,UACA,QACA,UACA,QACA,WACA,WACA,QACA,OACA,WACA,SACA,QACA,UACA,UACA,UACA,SACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,QACA,SACA,QACA,UACA,UACA,WAEIC,EAAS,CACb,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,gFACA,iFA0CaC,MAvCf,WAgCE,OACE,yBAAKC,UAAU,OAhBRF,EAAOG,KAAI,SAACC,EAAOC,GAGxB,OAFWC,KAAKC,MAAMD,KAAKE,SAAWR,EAAOS,QAClCH,KAAKC,MAAMD,KAAKE,SAAWR,EAAOS,QAE3C,yBAAKC,IAAKL,EAAGH,UAAU,UACrB,yBAAKS,GAAE,kBAAaN,GAAKH,UAAU,aACjC,yBAAKU,IAAKR,EAAOF,UAAU,WAC3B,uBAAGA,UAAU,QAAQH,EAAMM,KAE7B,4BAAQQ,QAAS,kBAzBR,SAACF,EAAIG,GACpB,IAAMC,EAAOC,SAASC,eAAeN,GACrCO,IACCC,MAAMJ,GACNK,MAAK,SAASC,GACb,IAAIC,EAAON,SAASO,cAAc,KAClCD,EAAKE,SAAL,iBAA0BV,EAA1B,QACAQ,EAAKG,KAAOJ,EACZC,EAAKI,WAENC,OAAM,SAASC,GACdC,QAAQD,MAAM,8BAA+BA,MAclBJ,CAAS,WAAD,OAAYnB,GAAKN,EAAMM,MAAtD,gBCtGUyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdf,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMe,c","file":"static/js/main.4447b36c.chunk.js","sourcesContent":["import React from \"react\";\nimport domtoimage from \"dom-to-image\";\nimport \"./App.css\";\n\nconst names = [\n  \"Antonio\",\n  \"Rafael\",\n  \"Diego\",\n  \"Miguel\",\n  \"Arthur\",\n  \"Carlos\",\n  \"Joao\",\n  \"Joel\",\n  \"Allison\",\n  \"Zoranildo\",\n  \"David\",\n  \"Neto\",\n  \"Rodolfo\",\n  \"Lucas\",\n  \"Eduardo\",\n  \"Bruno\",\n  \"Henrique\",\n  \"Humberto\",\n  \"Jonas\",\n  \"Caio\",\n  \"Bernardo\",\n  \"Heitor\",\n  \"Pedro\",\n  \"Gabriel\",\n  \"Nicolas\",\n  \"Joaquim\",\n  \"Samuel\",\n  \"Lincoln\",\n  \"Murilo\",\n  \"Isaac\",\n  \"Daniel\",\n  \"Benicio\",\n  \"CauÃ£\",\n  \"Brian\",\n  \"Lopes\",\n  \"Victor\",\n  \"Bento\",\n  \"Vicente\",\n  \"Emanuel\",\n  \"Otavio\"\n];\nconst images = [\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592949422/vc.boi/03.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592949364/vc.boi/01.png\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592949422/vc.boi/02.png\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954433/vc.boi/04.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954433/vc.boi/05.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954433/vc.boi/06.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954433/vc.boi/07.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954433/vc.boi/08.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954433/vc.boi/09.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/10.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/11.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/12.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/14.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/15.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/16.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/17.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/18.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/19.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/20.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/21.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/22.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/23.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/24.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/25.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/26.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/27.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/28.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/29.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/30.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/31.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/32.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/33.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/34.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/35.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/36.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/37.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/38.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/39.jpg\",\n  \"https://res.cloudinary.com/luneswallet/image/upload/v1592954434/vc.boi/40.jpg\",\n];\n\nfunction App() {\n  const download = (id, name) => {\n    const node = document.getElementById(id);\n    domtoimage\n    .toPng(node)\n    .then(function(dataUrl) {\n      var link = document.createElement('a');\n      link.download = `vc-boi-${name}.png`;\n      link.href = dataUrl;\n      link.click();\n    })\n    .catch(function(error) {\n      console.error(\"oops, something went wrong!\", error);\n    });\n  };\n\n  const gerar = () => {\n    return images.map((image, i) => {\n      const n1 = Math.floor(Math.random() * images.length);\n      const n2 = Math.floor(Math.random() * images.length);\n      return (\n        <div key={i} className=\"parent\">\n          <div id={`my-node-${i}`} className=\"container\">\n            <img src={image} className=\"avatar\"/>\n            <p className=\"name\">{names[i]}</p>\n          </div>\n          <button onClick={() => download(`my-node-${i}`, names[i])}>baixar</button>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      {gerar()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}